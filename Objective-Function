function err = Sphere(x)
    global NFE; 
    if isempty(NFE)
        NFE = 0;
    end

    NFE = NFE + 1;
    
    % Design parameters
    a = x(1);  % Length of crank
    b = x(2);  % Length of coupler
    c = x(3);  % Length of rocker
    d = x(4);  % Fixed length (distance from ground to coupler)
    theta1_init = x(5); % Initial angle of crank
    theta2_init = x(6); % Initial angle of coupler
    theta3_init = x(7); % Initial angle of rocker
    
    % Desired trajectory (example: sinusoidal)
    t = linspace(0, 2*pi, 50);
    x_des = linspace(4, 6, length(t));  % X-coordinate of the tracer
    y_des = linspace(2, 2.5, length(t));  % Y-coordinate of the tracer
    
    err = 0;  % Initialize error
    
    for i = 1:length(t)
        % Assume input angle theta2 = t(i)
        theta2 = theta2_init + t(i);
        
        % Forward kinematics: calculate position of coupler (tracer)
        
        % Position of crank end (P2)
        P2 = [a*cos(theta1_init + t(i)), a*sin(theta1_init + t(i))];
        
        % Calculate position of coupler point using loop closure
        % Solve for theta4 using geometry (loop closure)
        R = sqrt((P2(1)-d)^2 + P2(2)^2);
        cos_theta4 = (c^2 + d^2 - R^2) / (2*c*d);
        if abs(cos_theta4) > 1
            err = err + 1e6; continue; % Infeasible geometry
        end
        theta4 = acos(cos_theta4);
        
        % Approximate coupler orientation
        theta3 = atan2(P2(2), P2(1));  % Can refine if needed
        
        % Tracer position in global frame
        tracer = P2 + [cos(theta3), -sin(theta3); sin(theta3), cos(theta3)] * [x(5); x(6)];
        
        % Add position error (RMSE)
        err = err + (tracer(1) - x_des(i))^2 + (tracer(2) - y_des(i))^2;
    end
end
