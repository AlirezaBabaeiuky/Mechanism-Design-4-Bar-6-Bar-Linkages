function err = Sphere(x)
    global NFE;
    if isempty(NFE)
        NFE = 0;
    end
    NFE = NFE + 1;
    
    % Design Variables (GA parameters)
    a = x(1);  % Crank length
    b = x(2);  % Coupler length
    c = x(3);  % Rocker length
    d = x(4);  % Ground link length
    theta1_init = x(5); % Initial angle for Crank (theta1)
    theta2_init = x(6); % Initial angle for Coupler (theta2)
    theta3_init = x(7); % Initial angle for Rocker (theta3)

    % Desired trajectory
    t = linspace(0, 2*pi, 50);   % Time steps or waypoints
    x_des = linspace(4, 6, length(t));  % Desired X trajectory
    y_des = linspace(2, 2.5, length(t)); % Desired Y trajectory

    err = 0;  % Initialize error (RMSE or squared error)
    
    for i = 1:length(t)
        % Forward kinematics: Calculate position of the coupler
        % Using initial angles and design parameters
        theta2 = theta2_init + t(i); % Update for Crank motion
        theta3 = theta3_init + t(i); % Update for Coupler motion
        theta4 = theta3_init + t(i); % Update for Rocker motion
        
        % Position of crank end (P2)
        P2 = [a*cos(theta2), a*sin(theta2)];
        
        % Using cosine law to calculate position of P4 (Rock end)
        R = sqrt((P2(1) - d)^2 + P2(2)^2);
        cos_theta4 = (c^2 + d^2 - R^2) / (2*c*d);
        if abs(cos_theta4) > 1
            err = err + 1e6; continue;  % Infeasible geometry
        end
        theta4 = acos(cos_theta4);  % Calculate theta4

        % Tracer position (coupler point location)
        tracer = P2 + [cos(theta3), -sin(theta3); sin(theta3), cos(theta3)] * [b; 0];
        
        % Add squared error (RMSE) to error calculation
        err = err + (tracer(1) - x_des(i))^2 + (tracer(2) - y_des(i))^2;
    end
end
